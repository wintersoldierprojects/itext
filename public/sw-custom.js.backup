// CherryGifts Chat Service Worker with Push Notifications
const CACHE_NAME = 'cherrygifts-chat-v1'
const urlsToCache = [
  '/',
  '/admin',
  '/users',
  '/icons/icon-192x192.png',
  '/manifest.json'
]

// Install service worker
self.addEventListener('install', (event) => {
  console.log('Service Worker: Installing...')
  event.waitUntil(
    caches.open(CACHE_NAME)
      .then((cache) => {
        console.log('Service Worker: Caching files')
        return cache.addAll(urlsToCache)
      })
      .then(() => {
        console.log('Service Worker: Skip waiting')
        return self.skipWaiting()
      })
  )
})

// Activate service worker
self.addEventListener('activate', (event) => {
  console.log('Service Worker: Activating...')
  event.waitUntil(
    caches.keys().then((cacheNames) => {
      return Promise.all(
        cacheNames.map((cacheName) => {
          if (cacheName !== CACHE_NAME) {
            console.log('Service Worker: Deleting old cache:', cacheName)
            return caches.delete(cacheName)
          }
        })
      )
    }).then(() => {
      console.log('Service Worker: Claiming clients')
      return self.clients.claim()
    })
  )
})

// Fetch handler with offline support
self.addEventListener('fetch', (event) => {
  // Skip non-GET requests
  if (event.request.method !== 'GET') return

  event.respondWith(
    caches.match(event.request)
      .then((response) => {
        // Return cached version or fetch from network
        if (response) {
          return response
        }
        
        return fetch(event.request).catch(() => {
          // If both cache and network fail, return offline page for navigation requests
          if (event.request.mode === 'navigate') {
            return caches.match('/') // Return cached homepage as fallback
          }
        })
      })
  )
})

// Push notification handler
self.addEventListener('push', (event) => {
  console.log('Push received:', event)
  
  let data = {}
  try {
    data = event.data ? event.data.json() : {}
  } catch (e) {
    data = { 
      title: 'New Message', 
      body: event.data?.text() || 'You have a new message' 
    }
  }

  const options = {
    title: data.title || 'CherryGifts Chat',
    body: data.body || 'You have a new message',
    icon: '/icons/icon-192x192.png',
    badge: '/icons/icon-96x96.png',
    data: data.url || '/',
    tag: 'cherrygifts-message',
    requireInteraction: false,
    actions: [
      {
        action: 'open',
        title: 'Open Chat',
        icon: '/icons/icon-96x96.png'
      },
      {
        action: 'close',
        title: 'Dismiss'
      }
    ],
    vibrate: [200, 100, 200],
    silent: false
  }

  event.waitUntil(
    self.registration.showNotification(options.title, options)
  )
})

// Notification click handler
self.addEventListener('notificationclick', (event) => {
  console.log('Notification clicked:', event)
  
  event.notification.close()

  if (event.action === 'close') {
    return
  }

  // Default action or 'open' action
  const url = event.notification.data || '/'
  
  event.waitUntil(
    clients.matchAll({ type: 'window', includeUncontrolled: true })
      .then((clientList) => {
        // Check if a window is already open
        for (const client of clientList) {
          if (client.url.includes(self.location.origin) && 'focus' in client) {
            return client.focus()
          }
        }
        
        // Open new window
        if (clients.openWindow) {
          return clients.openWindow(url)
        }
      })
  )
})

// Background sync for offline message sending
self.addEventListener('sync', (event) => {
  console.log('Background sync:', event.tag)
  
  if (event.tag === 'background-sync-messages') {
    event.waitUntil(syncMessages())
  }
})

// Function to sync offline messages
async function syncMessages() {
  console.log('Service Worker: Syncing offline messages...')
  
  try {
    // Get offline messages from IndexedDB
    const db = await openDB()
    const messages = await getOfflineMessages(db)
    
    console.log('Service Worker: Found', messages.length, 'offline messages')
    
    for (const message of messages) {
      try {
        const response = await fetch('/api/messages/send', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(message)
        })
        
        if (response.ok) {
          await removeOfflineMessage(db, message.id)
          console.log('Service Worker: Message synced:', message.id)
        } else {
          console.error('Service Worker: Failed to sync message:', message.id, response.status)
        }
      } catch (error) {
        console.error('Service Worker: Failed to sync message:', message.id, error)
      }
    }
  } catch (error) {
    console.error('Service Worker: Background sync failed:', error)
  }
}

// IndexedDB helpers
function openDB() {
  return new Promise((resolve, reject) => {
    const request = indexedDB.open('CherryGiftsChat', 1)
    
    request.onerror = () => reject(request.error)
    request.onsuccess = () => resolve(request.result)
    
    request.onupgradeneeded = (event) => {
      const db = event.target.result
      if (!db.objectStoreNames.contains('offlineMessages')) {
        const store = db.createObjectStore('offlineMessages', { keyPath: 'id' })
        store.createIndex('timestamp', 'timestamp', { unique: false })
      }
    }
  })
}

function getOfflineMessages(db) {
  return new Promise((resolve, reject) => {
    const transaction = db.transaction(['offlineMessages'], 'readonly')
    const store = transaction.objectStore('offlineMessages')
    const request = store.getAll()
    
    request.onerror = () => reject(request.error)
    request.onsuccess = () => resolve(request.result)
  })
}

function removeOfflineMessage(db, id) {
  return new Promise((resolve, reject) => {
    const transaction = db.transaction(['offlineMessages'], 'readwrite')
    const store = transaction.objectStore('offlineMessages')
    const request = store.delete(id)
    
    request.onerror = () => reject(request.error)
    request.onsuccess = () => resolve()
  })
}

// Message to main thread
self.addEventListener('message', (event) => {
  console.log('Service Worker: Received message:', event.data)
  
  if (event.data && event.data.type === 'SKIP_WAITING') {
    self.skipWaiting()
  }
})